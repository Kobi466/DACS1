package view;

import controller.OrderController;
import dto.OrderDTO;
import dto.OrderItemDTO;
import dto.OrderSummaryDTO;
import network.GlobalResponseRouter;
import network.JsonResponse;
import util.JacksonUtils;
import util.OrderStatusRenderer;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class OrderPanel extends JPanel {
    private final JTable orderTable, detailTable;
    private final DefaultTableModel orderModel, detailModel;
    private final JButton btnConfirm, btnCancel, btnComplete, btnRefresh, btCheBien;
    private final OrderController controller;

    public OrderPanel() {
        this.controller = new OrderController(this);
        this.setLayout(new BorderLayout());

        // ========== B·∫¢NG ƒê∆†N H√ÄNG ==========
        orderModel = createOrderTableModel();
        orderTable = createOrderTable(orderModel);
        add(new JScrollPane(orderTable), BorderLayout.CENTER);

        // ========== PANEL D∆Ø·ªöI ==========
        JPanel bottomPanel = new JPanel(new BorderLayout());

        detailModel = createDetailTableModel();
        detailTable = createDetailTable(detailModel);
        bottomPanel.add(new JScrollPane(detailTable), BorderLayout.CENTER);

        // ========== BUTTON PANEL ==========
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        btnConfirm = createButton("‚úî X√°c nh·∫≠n");
        btnCancel = createButton("‚úñ Hu·ª∑");
        btnComplete = createButton("‚úì Ho√†n t·∫•t");
        btCheBien = createButton("ƒêang ch·∫ø bi·∫øn");
        btnRefresh = createButton("L√†m m·ªõi", new Color(0x3498db), Color.WHITE);
        buttonPanel.add(btnCancel);
        buttonPanel.add(btnConfirm);
        buttonPanel.add(btCheBien);
        buttonPanel.add(btnComplete);
        buttonPanel.add(btnRefresh);
        bottomPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(bottomPanel, BorderLayout.SOUTH);

        // ========== S·ª∞ KI·ªÜN ==========
        registerListeners();
        registerTableSelectionListener();
        registerButtonActions();

        controller.loadOrders();
    }

    // ====================== TABLE MODEL ======================

    private DefaultTableModel createOrderTableModel() {
        return new DefaultTableModel(new Object[]{"ID", "T√™n Kh√°ch", "SƒêT", "Th·ªùi gian", "Tr·∫°ng th√°i"}, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
    }

    private JTable createOrderTable(DefaultTableModel model) {
        JTable table = new JTable(model);
        table.setRowHeight(30);
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        table.setDefaultRenderer(Object.class, new OrderStatusRenderer());
        return table;
    }

    private DefaultTableModel createDetailTableModel() {
        return new DefaultTableModel(new Object[]{"M√≥n ƒÉn", "SL", "ƒê∆°n gi√°", "T·ªïng"}, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
    }

    private JTable createDetailTable(DefaultTableModel model) {
        JTable table = new JTable(model);
        table.setRowHeight(28);
        return table;
    }

    // ====================== BUTTON ======================

    private JButton createButton(String text) {
        return createButton(text, null, null);
    }

    private JButton createButton(String text, Color bg, Color fg) {
        JButton button = new JButton(text);
        if (bg != null) {
            button.setBackground(bg);
            button.setForeground(fg);
            button.setFont(new Font("Arial", Font.BOLD, 14));
            button.setFocusPainted(false);
        }
        return button;
    }

    // ====================== S·ª∞ KI·ªÜN ======================

    private void registerListeners() {
        GlobalResponseRouter.addListener(response -> {
            switch (response.getStatus()) {
                case "GET_ORDERS_SUCCESS" -> {
                    List<OrderSummaryDTO> orders = (List<OrderSummaryDTO>) response.getData();
                    controller.setOrders(orders);
                    updateOrderTable(orders);
                    System.out.println("‚úÖ ƒê√£ nh·∫≠n danh s√°ch ƒë∆°n h√†ng.");
                }
                case "NEW_ORDER_CREATED" -> {
                    OrderSummaryDTO newOrder = JacksonUtils.getObjectMapper().convertValue(
                            response.getData(), OrderSummaryDTO.class);
                    controller.addOrder(newOrder);
                    updateOrderTable(controller.getOrders());
                    controller.loadOrderDetail(newOrder.getOrderId());
                    System.out.println("üÜï ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m.");
                    controller.reloadOrders();
                }
                case "GET_ORDER_ITEMS_SUCCESS" -> {
                    OrderDTO order = JacksonUtils.getObjectMapper().convertValue(
                            response.getData(), OrderDTO.class);
                    updateOrderDetail(order);
                    System.out.println("‚úÖ ƒê√£ nh·∫≠n chi ti·∫øt ƒë∆°n h√†ng.");
                }
                case "UPDATE_ORDER_STATUS" -> {
                    OrderSummaryDTO order = JacksonUtils.getObjectMapper().convertValue(
                            response.getData(), OrderSummaryDTO.class);
                    controller.updateOrderStatus(order.getOrderId(), order.getStatus());
                    controller.reloadOrders();
                }
                case "UPDATE_ORDER_STATUS_SUCCESS" -> {
                    JOptionPane.showMessageDialog(null, "‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng.");
                }
                case "UPDATE_ORDER_STATUS_FAIL" -> {
                    JOptionPane.showMessageDialog(null, "‚ùå C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i.");
                }
                default -> System.out.println("‚ö†Ô∏è Kh√¥ng hi·ªÉu ph·∫£n h·ªìi: " + response.getStatus());
            }
        });
    }

    private void registerTableSelectionListener() {
        orderTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                Integer orderId = getSelectedOrderId();
                if (orderId != null) {
                    controller.loadOrderDetail(orderId);
                } else {
                    detailModel.setRowCount(0);
                }
            }
        });
    }

    private void registerButtonActions() {
        // L√†m m·ªõi danh s√°ch
        btnRefresh.addActionListener(e -> controller.reloadOrders());

        // X√°c nh·∫≠n ƒë∆°n h√†ng: CH·ªú X√ÅC NH·∫¨N -> ƒê√É X√ÅC NH·∫¨N
        btnConfirm.addActionListener(e -> {
            OrderSummaryDTO order = getSelectedOrder();
            if (order == null) return;

            if (order.getStatus() == OrderSummaryDTO.OrderStatus.CHO_XAC_NHAN) {
                controller.updateOrderStatus(order.getOrderId(), OrderSummaryDTO.OrderStatus.DA_XAC_NHAN);
            } else {
                showError("‚ùå Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë∆°n ƒëang ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n'.");
            }
        });

        // Ch·∫ø bi·∫øn ƒë∆°n h√†ng: ƒê√É X√ÅC NH·∫¨N -> ƒêANG CH·∫æ BI·∫æN
        btCheBien.addActionListener(e -> {
            OrderSummaryDTO order = getSelectedOrder();
            if (order == null) return;

            if (order.getStatus() == OrderSummaryDTO.OrderStatus.DA_XAC_NHAN) {
                controller.updateOrderStatus(order.getOrderId(), OrderSummaryDTO.OrderStatus.DANG_CHE_BIEN);
            } else {
                showError("‚ùå Ch·ªâ c√≥ th·ªÉ chuy·ªÉn sang 'ƒêang ch·∫ø bi·∫øn' t·ª´ ƒë∆°n 'ƒê√£ x√°c nh·∫≠n'.");
            }
        });

        // Ho√†n t·∫•t ƒë∆°n h√†ng: ƒêANG CH·∫æ BI·∫æN -> HO√ÄN TH√ÄNH
        btnComplete.addActionListener(e -> {
            OrderSummaryDTO order = getSelectedOrder();
            if (order == null) return;

            if (order.getStatus() == OrderSummaryDTO.OrderStatus.DANG_CHE_BIEN) {
                controller.updateOrderStatus(order.getOrderId(), OrderSummaryDTO.OrderStatus.HOAN_THANH);
            } else {
                showError("‚ùå Ch·ªâ c√≥ th·ªÉ ho√†n t·∫•t ƒë∆°n ƒëang ·ªü tr·∫°ng th√°i 'ƒêang ch·∫ø bi·∫øn'.");
            }
        });

        // Hu·ª∑ ƒë∆°n h√†ng: ch·ªâ cho hu·ª∑ n·∫øu ƒëang CH·ªú X√ÅC NH·∫¨N ho·∫∑c ƒê√É X√ÅC NH·∫¨N
        btnCancel.addActionListener(e -> {
            OrderSummaryDTO order = getSelectedOrder();
            if (order == null) return;

            OrderSummaryDTO.OrderStatus status = order.getStatus();
            if (status == OrderSummaryDTO.OrderStatus.CHO_XAC_NHAN ||
                    status == OrderSummaryDTO.OrderStatus.DA_XAC_NHAN) {
                controller.updateOrderStatus(order.getOrderId(), OrderSummaryDTO.OrderStatus.DA_HUY);
            } else {
                showError("‚ùå Ch·ªâ c√≥ th·ªÉ hu·ª∑ ƒë∆°n ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n' ho·∫∑c 'ƒê√£ x√°c nh·∫≠n'.");
            }
        });
    }


    // ====================== C·∫¨P NH·∫¨T GIAO DI·ªÜN ======================

    public void updateOrderTable(List<OrderSummaryDTO> orders) {
        SwingUtilities.invokeLater(() -> {
            orderModel.setRowCount(0);
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");
            for (OrderSummaryDTO o : orders) {
                orderModel.addRow(new Object[]{
                        o.getOrderId(),
                        o.getCustomerName(),
                        o.getCustomerPhone(),
                        o.getOrderDate().format(fmt),
                        o.getStatus().name()
                });
            }
        });
    }

    public void updateOrderDetail(OrderDTO order) {
        SwingUtilities.invokeLater(() -> {
            detailModel.setRowCount(0);
            for (OrderItemDTO item : order.getItems()) {
                detailModel.addRow(new Object[]{
                        item.getFoodName(),
                        item.getQuantity(),
                        item.getUnitPrice(),
                        item.getTotalPrice()
                });
            }
        });
    }

    // ====================== TI·ªÜN √çCH ======================

    private Integer getSelectedOrderId() {
        int row = orderTable.getSelectedRow();
        if (row >= 0) {
            Object value = orderModel.getValueAt(orderTable.convertRowIndexToModel(row), 0);
            if (value instanceof Integer) return (Integer) value;
            try {
                return Integer.parseInt(value.toString());
            } catch (Exception e) {
                showError("L·ªói l·∫•y ID ƒë∆°n h√†ng.");
            }
        }
        return null;
    }

    private OrderSummaryDTO getSelectedOrder() {
        int row = orderTable.getSelectedRow();
        if (row >= 0) {
            int modelRow = orderTable.convertRowIndexToModel(row);
            int orderId = (int) orderModel.getValueAt(modelRow, 0);
            return controller.getOrderById(orderId);
        }
        showError("Vui l√≤ng ch·ªçn m·ªôt ƒë∆°n h√†ng.");
        return null;
    }

    public void showError(String msg) {
        JOptionPane.showMessageDialog(this, msg, "L·ªói", JOptionPane.ERROR_MESSAGE);
    }

    public void showMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
    }
}
