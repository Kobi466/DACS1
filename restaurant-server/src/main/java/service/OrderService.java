package service;



import dto.OrderDTO;
import dto.OrderItemDTO;
import dto.OrderSummaryDTO;
import model.Order;
import model.OrderItem;
import repositoy_dao.OrderDAO;
import repositoy_dao.OrderItemDAO;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;


public class OrderService {

    private final OrderDAO orderDAO = new OrderDAO();
    private final OrderItemDAO orderItemDAO = new OrderItemDAO();

    // 1. L·∫•y danh s√°ch ƒë∆°n h√†ng d·∫°ng t√≥m t·∫Øt
    public List<OrderSummaryDTO> getAllOrderSummaries() {
        List<Order> orders = orderDAO.selectAll();

        return orders.stream()
                .map(order -> new OrderSummaryDTO(
                        order.getOrder_Id(),
                        order.getCustomer().getUserName(),
                        order.getCustomer().getSdt(),
                        order.getOrderDate(),
                        OrderSummaryDTO.OrderStatus.valueOf(order.getStatus().name())
                ))
                .collect(Collectors.toList());
    }

    // 2. L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
    public OrderDTO getOrderDetail(int orderId) {
        Order order = orderDAO.selecById(orderId);
        if (order == null) {
            System.out.println("[ERROR] Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ID: " + orderId);
            return null;
        }

        List<OrderItem> orderItems = orderItemDAO.findByOrderId(orderId);
        if (orderItems == null || orderItems.isEmpty()) {
            System.out.println("[WARN] Kh√¥ng c√≥ m√≥n ƒÉn n√†o cho ƒë∆°n h√†ng ID: " + orderId);
        } else {
            System.out.println("[DEBUG] S·ªë l∆∞·ª£ng m√≥n ƒÉn t√¨m ƒë∆∞·ª£c: " + orderItems.size());
        }

        List<OrderItemDTO> itemDTOs = orderItems.stream()
                .filter(item -> {
                    if (item.getMenuItem() == null) {
                        System.out.println("[ERROR] M√≥n ƒÉn null trong OrderItem ID: " + item.getOrderId());
                        return false;
                    }
                    return true;
                })
                .map(item -> new OrderItemDTO(
                        item.getMenuItem().getName(),
                        item.getQuantity(),
                        item.getPrice(),
                        item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity()))
                ))
                .collect(Collectors.toList());

        double total = itemDTOs.stream()
                .map(OrderItemDTO::getTotalPrice)
                .mapToDouble(BigDecimal::doubleValue)
                .sum();

        return new OrderDTO(
                order.getCustomer().getUserName(),
                order.getCustomer().getSdt(),
                order.getOrderDate(),
                total,
                itemDTOs
        );
    }




    // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    public void updateOrderStatus(int orderId, Order.OrderStatus status) {
        orderDAO.updateStatus(orderId, status);
    }

    public boolean updateOrderStatus(int orderId, OrderSummaryDTO.OrderStatus status) {
        Order order = orderDAO.selecById(orderId);
        if (order == null) {
            System.out.println("[ERROR] Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ID: " + orderId);
            return false;
        }

        Order.OrderStatus current = order.getStatus();
        Order.OrderStatus next = Order.OrderStatus.valueOf(status.name());

        if (!isValidTransition(current, next)) {
            System.out.printf("[WARN] Chuy·ªÉn tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: %s ‚ûú %s\n", current, next);
            return false;
        }

        order.setStatus(next);
        orderDAO.update(order);

        // üëâ X·ª≠ l√Ω theo tr·∫°ng th√°i m·ªõi
        switch (next) {
            case DA_XAC_NHAN:
                // G·ª≠i tin nh·∫Øn x√°c nh·∫≠n t·ªõi kh√°ch h√†ng
                System.out.println("[INFO] ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng ‚ûú g·ª≠i th√¥ng b√°o cho kh√°ch");
                // TODO: ChatService.sendMessageToCustomer(order.getCustomer(), "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");
                break;

            case HOAN_THANH:
                // Xu·∫•t h√≥a ƒë∆°n PDF
                System.out.println("[INFO] ƒê∆°n h√†ng ho√†n th√†nh ‚ûú xu·∫•t h√≥a ƒë∆°n PDF");
                // TODO: InvoiceService.generatePDF(order);
                break;
        }

        return true;
    }
    private boolean isValidTransition(Order.OrderStatus current, Order.OrderStatus next) {
        switch (current) {
            case CHO_XAC_NHAN:
                return next == Order.OrderStatus.DA_XAC_NHAN || next == Order.OrderStatus.DA_HUY;
            case DA_XAC_NHAN:
                return next == Order.OrderStatus.DANG_CHE_BIEN || next == Order.OrderStatus.DA_HUY;
            case DANG_CHE_BIEN:
                return next == Order.OrderStatus.HOAN_THANH;
            default:
                return false;
        }
    }
}
