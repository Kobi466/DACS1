package controller;

import dto.CustomerDTO;
import model.Order;
import service.ReservationOrderCombinedService;
import session.ChatHistoryRequest;
import dto.MessageDTO;
import network.JsonRequest;
import network.JsonResponse;
import service.MessageService;
import socketserver.ClientHandler;
import util.JacksonUtils;
import util.ReservationOrderParser;


import java.time.LocalDateTime;
import java.util.List;

public class MessageController {
    private final MessageService messageService = new MessageService();

    public void handleSendMessage(JsonRequest request, ClientHandler senderHandler) {
        try {
            if (request == null || request.getData() == null) {
                senderHandler.sendResponse(new JsonResponse("ERROR", "Request data is invalid or missing", "server"));
                return;
            }

            // Chuy·ªÉn ƒë·ªïi JsonRequest th√†nh MessageDTO
            MessageDTO messageDTO = JacksonUtils.getObjectMapper().convertValue(request.getData(), MessageDTO.class);

            if (messageDTO == null) {
                senderHandler.sendResponse(new JsonResponse("ERROR", "Failed to parse message data", "server"));
                return;
            }

            // L∆∞u tin nh·∫Øn v√†o c∆° s·ªü d·ªØ li·ªáu
            boolean success = messageService.saveMessage(messageDTO);

            if (success) {
                senderHandler.sendResponse(new JsonResponse("MESSAGE_SENT", "Message saved successfully", "server"));
                // Ph√°t tin nh·∫Øn real-time t·ªõi receiver
                senderHandler.broadcastMessage(messageDTO);
                System.out.println("üì§ G·ª≠i tin nh·∫Øn t·ª´ " + messageDTO.getSender() + " ƒë·∫øn " + messageDTO.getReceiver());
            } else {
                senderHandler.sendResponse(new JsonResponse("ERROR", "Cannot save message", "server"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            senderHandler.sendResponse(new JsonResponse("ERROR", "Failed to handle message", "server"));
        }
    }

    public void handleGetChatHistory(JsonRequest request, ClientHandler senderHandler) {
        try {
            if (request == null || request.getData() == null) {
                senderHandler.sendResponse(new JsonResponse("ERROR", "Request data is invalid or missing", "server"));
                return;
            }

            ChatHistoryRequest chatHistoryRequest = JacksonUtils.getObjectMapper()
                    .convertValue(request.getData(), ChatHistoryRequest.class);

            if (chatHistoryRequest == null) {
                senderHandler.sendResponse(new JsonResponse("ERROR", "Invalid request data format", "server"));
                return;
            }

            System.out.println("üü¢ Debug: L·∫•y l·ªãch s·ª≠ chat gi·ªØa customer: '"
                    + chatHistoryRequest.getCustomer() + "' v√† staff: '" + chatHistoryRequest.getStaff() + "'");

            List<MessageDTO> chatHistory = messageService.getChatHistory(chatHistoryRequest);

            if (chatHistory == null || chatHistory.isEmpty()) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ chat ho·∫∑c danh s√°ch tr·ªëng.");
            } else {
                System.out.println("üü¢ Debug: S·ªë l∆∞·ª£ng tin nh·∫Øn trong l·ªãch s·ª≠: " + chatHistory.size());
            }

            JsonResponse response = new JsonResponse("CHAT_HISTORY", chatHistory, "server");
            senderHandler.sendResponse(response);
        } catch (Exception e) {
            e.printStackTrace();
            senderHandler.sendResponse(new JsonResponse("ERROR", "Failed to get chat history", "server"));
        }
    }

    public void handleGetCustomerList(JsonRequest request, ClientHandler senderHandler) {
        try {
            System.out.println("üü¢ Debug: X·ª≠ l√Ω y√™u c·∫ßu t·∫£i danh s√°ch kh√°ch h√†ng t·ª´ client.");

            // G·ªçi l·ªõp service ƒë·ªÉ l·∫•y danh s√°ch kh√°ch h√†ng ƒë√£ c√≥ tin nh·∫Øn
            List<CustomerDTO> customers = messageService.getCustomersWithMessages();

            if (customers == null) {
                // Tr∆∞·ªùng h·ª£p kh√¥ng th·ªÉ truy v·∫•n danh s√°ch kh√°ch h√†ng
                System.err.println("‚ùå L·ªói: Kh√¥ng th·ªÉ truy xu·∫•t danh s√°ch kh√°ch h√†ng c√≥ tin nh·∫Øn t·ª´ c∆° s·ªü d·ªØ li·ªáu.");
                senderHandler.sendResponse(new JsonResponse("ERROR", "Cannot load customer list with messages", "server"));
                return;
            }

            if (customers.isEmpty()) {
                // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ kh√°ch h√†ng n√†o c√≥ tin nh·∫Øn
                System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o c√≥ tin nh·∫Øn.");
                senderHandler.sendResponse(
                        new JsonResponse("NO_CUSTOMERS_WITH_MESSAGES", "No customers found with existing messages", "server")
                );
                return;
            }

            // Th√†nh c√¥ng: g·ª≠i danh s√°ch kh√°ch h√†ng c√≥ tin nh·∫Øn
            System.out.println("üü¢ Debug: S·ªë l∆∞·ª£ng kh√°ch h√†ng t·∫£i ƒë∆∞·ª£c: " + customers.size());
            senderHandler.sendResponse(new JsonResponse("GET_CUSTOMER_LIST", customers, "server"));

        } catch (Exception e) {
            e.printStackTrace();
            senderHandler.sendResponse(new JsonResponse("ERROR", "Failed to get customer list", "server"));
        }
    }

    public void handleGetCustomerListWithMessages(JsonRequest request, ClientHandler senderHandler) {
        try {
            System.out.println("üü¢ Debug: X·ª≠ l√Ω y√™u c·∫ßu danh s√°ch kh√°ch h√†ng k√®m tin nh·∫Øn.");

            // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch kh√°ch h√†ng c√πng tin nh·∫Øn g·∫ßn nh·∫•t
            List<MessageDTO> customersAndMessages = messageService.getCustomersWithLastMessages();

            if (customersAndMessages == null || customersAndMessages.isEmpty()) {
                System.err.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ho·∫∑c tin nh·∫Øn.");
                senderHandler.sendResponse(
                        new JsonResponse("NO_CUSTOMERS_WITH_MESSAGES", "No customers or messages found", "server")
                );
                return;
            }

            senderHandler.sendResponse(
                    new JsonResponse("GET_CUSTOMERS_WITH_MESSAGES", customersAndMessages, "server")
            );

            System.out.println("üü¢ Debug: Tr·∫£ v·ªÅ danh s√°ch kh√°ch h√†ng v√† tin nh·∫Øn (" + customersAndMessages.size() + ").");
        } catch (Exception e) {
            e.printStackTrace();
            senderHandler.sendResponse(new JsonResponse("ERROR", "Failed to get customer list with messages", "server"));
        }
    }

    public static void notifyCustomer(Order order, String message) {
        String customerUsername = order.getCustomer().getUserName();
        String staffUsername = "staff"; // ho·∫∑c ƒë·ªãnh danh nh√¢n vi√™n th·ª±c t·∫ø n·∫øu c√≥


        MessageDTO messageDTO = new MessageDTO(
                staffUsername,                  // sender
                customerUsername,               // receiver
                message,                 // content
                LocalDateTime.now(),            // th·ªùi gian g·ª≠i
                order.getCustomer().getCustomer_Id()     // customerId
        );

        // L∆∞u DB n·∫øu mu·ªën
        MessageService messageService = new MessageService();
        messageService.saveMessage(messageDTO);

        // G·ª≠i socket ƒë·∫øn client
        ClientHandler customerHandler = ClientHandler.getClientByUsername(customerUsername);
        if (customerHandler != null) {
            customerHandler.broadcastMessage(messageDTO);
            System.out.println("üì¢ ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi kh√°ch: " + customerUsername);
        } else {
            System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y handler cho kh√°ch: " + customerUsername);
        }
    }
}